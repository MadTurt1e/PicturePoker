// this is where the file is located
package game.jdbc.picturepoker;

// this is effectively the C include thing
import game.jdbc.picturepoker.util.DataTransferObject;

public class Player implements DataTransferObject, Comparable<Player> {
    //Special player ID - not used in the sample code
    private long p_ID;
    private String p_name;
    private String passcode;
    private int dollars;

    // Per player game statistics
    // User placement stats
    private int first_places;
    private int second_places;
    private int third_places;
    private int fourth_places;
    private int lifetime_tokens;
    // User hand stats
    private int flushes; // 5 of a kind
    private int quads; // 4 of a kind
    private int fullHouses;
    private int triples; // 3 of a kind + 2 kickers
    private int twoPairs;
    private int onePairs;
    private int highCards;
    private int cardsChanged;
    private int lifetimeRoundsWon;
    private int lifetimeTotalBet;

    //Per game info - Zeroed out, and refreshed upon each new game
    private int tokens;
    private int bet;
    private int roundsWon;
    // Probably should be a bool but I am too lazy to add a updateBool method to PlayerDAO
    private int finishedRound;
    private Card hand[];

    //Autogenerated getters and setters
    @Override
    public long getID() {
        return p_ID;
    }

    public void setID(long playerID) {
        this.p_ID = playerID;
    }

    // Getters and Setters
    public String getPlayerName() {
        return p_name;
    }

    public void setPlayerName(String name) {
        this.p_name = name;
    }

    public String getPasscode() {
        return passcode;
    }

    public void setPasscode(String passcode) {
        this.passcode = passcode;
    }

    public int getFirstPlaces() {
        return first_places;
    }

    public void setFirstPlaces(int first_places) {
        this.first_places = first_places;
    }

    public int getSecondPlaces() {
        return second_places;
    }

    public void setSecondPlaces(int second_places) {
        this.second_places = second_places;
    }

    public int getThirdPlaces() {
        return third_places;
    }

    public void setThirdPlaces(int thirdPlaces) {
        this.third_places = thirdPlaces;
    }

    public int getFourthPlaces() {
        return fourth_places;
    }

    public void setFourthPlaces(int fourth_places) {
        this.fourth_places = fourth_places;
    }

    public int getLifetimeTokens(){
        return lifetime_tokens;
    }

    public void setLifetimeTokens(int lifetime_tokens){
        this.lifetime_tokens = lifetime_tokens;
    }

    public int getDollars() {
        return dollars;
    }

    public void setDollars(int dollars) {
        this.dollars = dollars;
    }



    public int getFlushes() {
        return flushes;
    }

    public void setFlushes(int flushes) {
        this.flushes = flushes;
    }

    public int getQuads() {
        return quads;
    }

    public void setQuads(int quads) {
        this.quads = quads;
    }

    public int getFullHouses() {
        return fullHouses;
    }

    public void setFullHouses(int fullHouses) {
        this.fullHouses = fullHouses;
    }

    public int getTriples() {
        return triples;
    }

    public void setTriples(int triples) {
        this.triples = triples;
    }

    public int getTwoPairs() {
        return twoPairs;
    }

    public void setTwoPairs(int twoPairs) {
        this.twoPairs = twoPairs;
    }

    public int getOnePairs() {
        return onePairs;
    }

    public void setOnePairs(int onePairs) {
        this.onePairs = onePairs;
    }

    public int getHighCards() {
        return highCards;
    }

    public void setHighCards(int highCards) {
        this.highCards = highCards;
    }

    public int getCardsChanged() {
        return cardsChanged;
    }

    public void setCardsChanged(int cardsChanged) {
        this.cardsChanged = cardsChanged;
    }

    public int getLifetimeRoundsWon() {
        return lifetimeRoundsWon;
    }

    public void setLifetimeRoundsWon(int lifetimeRoundsWon) {
        this.lifetimeRoundsWon = lifetimeRoundsWon;
    }

    public int getLifetimeTotalBet() {
        return lifetimeTotalBet;
    }

    public void setLifetimeTotalBet(int lifetimeTotalBet) {
        this.lifetimeTotalBet = lifetimeTotalBet;
    }

    public int getTokens() {
        return tokens;
    }

    public void setTokens(int tokens) {
        this.tokens = tokens;
    }

    public int getBet() {
        return bet;
    }

    public void setBet(int bet) {
        this.bet = bet;
    }

    public int getRoundsWon() {
        return roundsWon;
    }

    public void setRoundsWon(int rounds_won) {
        this.roundsWon = rounds_won;
    }

    public int getFinishedRound() {
        return finishedRound;
    }

    public void setFinishedRound(int finishedRound) {
        this.finishedRound = finishedRound;
    }

    public Card[] getHand() {
        return hand;
    }

    public void setHand(Card[] hand) {
        this.hand = hand;
    }

    // Comparison function for determining placement and turn order
    // Can now sort by just using ArrayList<Player>.sort()
    public int compareTo(Player p2){
        // Condition 1: Highest Token Count
        if(this.tokens - p2.getTokens() != 0){
            return p2.getTokens() - this.tokens;
        }
        else{
            // Condition 2: Most Rounds won
            if(this.roundsWon - p2.getRoundsWon() != 0){
                return p2.getRoundsWon() - this.roundsWon;
            }
            else{
                // Tiebreaker: Lowest Player ID
                // TODO: Make final tiebreaker based on position in game
                return (int)(this.p_ID - p2.getID());

            }
        }
    }

    // Game functions
    public int raise(){
        bet = getBet();
        if(bet >= 5 || getTokens() < 1){
            // Invalid bet, do not raise
            System.out.println("Player: Could not raise- Bet already max or no more tokens");
            return -1;
        }
        setBet(bet + 1);
        setTokens(getTokens() - 1);
        return 0;
    }

    public void resetPerGameInfo(){
        tokens = 10;
        bet = 1;
        roundsWon = 0;
        // Reset player hands
        for(int i = 0; i < 5; i++){
            hand[i].setToChange(true);
            hand[i].redrawSuit();
        }
    }

    // Statistic aggregation functions
    public int getGamesPlayed(){
        return getFirstPlaces() + getSecondPlaces() + getThirdPlaces() + getFourthPlaces();
    }

    public int getHandsPlayed(){
        return getFlushes() + getQuads() + getFullHouses() + getTriples() + getTwoPairs() + getOnePairs() + getHighCards();
    }

    //Gets the average lifetime tokens - we'd expect this to be a decimal.
    public double getAvgLifetimeTokens(){
        return (double)getLifetimeTokens()/getGamesPlayed();
    }
    //Gets the average lifetime bet - we'd expect this to be a decimal.
    public double getAvgBet(){
        return (double)getLifetimeTotalBet()/getGamesPlayed();
    }
    //Gets the average number of cards changed per hand played - we'd expect this to be a decimal.
    public double getAvgCardsChanged(){
        return (double)getCardsChanged()/getHandsPlayed();
    }
    // Gets the player's hands won as a percentage, rounded to the nearest percent.
    public double getRoundWinrate(){
        return (100 * (double)getLifetimeRoundsWon() / getHandsPlayed());
    }

    //ToString thing

    @Override
    public String toString() {
        return "Player{" +
                "p_ID=" + p_ID +
                ", name='" + p_name + '\'' +
                ", passcode='" + passcode + '\'' +
                ", dollars=" + dollars +
                ", first_places=" + first_places +
                ", second_places=" + second_places +
                ", third_places=" + third_places +
                ", fourth_places=" + fourth_places +
                ", lifetime_tokens=" + lifetime_tokens +
                ", lifetime_total_bet=" + lifetimeTotalBet +
                ", flushes=" + flushes +
                ", four_of_a_kinds=" + quads +
                ", full_houses=" + fullHouses +
                ", three_of_a_kinds=" + triples +
                ", two_pair=" + twoPairs +
                ", one_pair=" + onePairs +
                ", high_card=" + highCards +
                ", cards_changed=" + cardsChanged +
                ", lifetime_rounds_won=" + lifetimeRoundsWon +
                ", tokens=" + tokens +
                ", bet=" + bet +
                ", rounds_won=" + roundsWon +
                ", finished_round=" + finishedRound +
                '}';
    }
}